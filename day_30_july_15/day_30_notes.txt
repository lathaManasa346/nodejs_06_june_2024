Package.json
============
-Contains the metadata of the project.
-Helps NPM to understand how the project should be handled along with its dependencies.
-package.json files contain the below information.
	  project name,
	  version,
	  homepage,
	  description,
	  author,
	  keywords 
	  scripts 
	  dependencies etc.
-package.json file is normally located at the root directory of a Node.js project.


package.json  VS  package-lock.json
===================================
-package.json maintains only the main packages's information.
 "cors": "^2.8.5"
 "bootstrap" : "^5.2.1"
-package-lock.json containes the exact version. 
	"bootstrap" : "5.3.2" (npm update bootstrap)
-package-lock.json maintains main packages's information + nested-packages information
    "node_modules/cors": {  
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      }
-package.json lists the required dependencies and their version ranges, but not the exact versions to be installed.
-package-lock.json is used to ensure that the same dependencies are installed across different environments and prevent conflicts due to different versions being installed.

-package.json is created and modified manually by the developer.
-It is automatically generated by npm and updated whenever you install or update packages.

-in package.json (~) tells go up to hot-fixes 1.4.X if 1.4.1 is installed
 in package.json (^) checks if there is a newer version under 1.x.x if 1.4.1 is installed
 in package-lock.json - there is neither ~ nor ^


Express.JS
==========
-Express.js is a web application framework for building RESTful APIs with Node.js.
-a framework is a set of helper functions,tools and rules that help us to build our application.
-It provides various features that make web application development fast and easy which otherwise takes more time using only Node.js.
-Alternatives to Express.js are 'NestJS' , 'Vanilla Node.js','koa','sails.js'
-NestJS : A progressive Node.js framework for building efficient, reliable and scalable server-side applications.

https://expressjs.com/en/starter/examples.html


Advantages of Express.js
========================
-Makes Node.js web application development fast and easy.
-Easy to configure and customize.
-Allows to define routes of your application based on HTTP methods and URLs.
-Includes various middleware modules which you can use to perform additional tasks on request and response.
-Easy to integrate with different template engines like Jade, Vash, EJS etc.
-Allows to define an error handling middleware.
-Easy to serve static files and resources of your application.
-Allows to create REST API server.
-Easy to connect with databases such as MongoDB, Redis, MySQL.



How to use Express
==================
1. import express
   const express = require('express')
2. create an instance of express.
   const app = express()
3. use methods
   app.get(route, callback)
   app.post(route, callback)


Express Methods
===============
app.get()
app.post()
app.put()
app.patch()
app.delete()
app.listen()
app.use()
app.all()



app.use() vs app.get()
======================
-app.use() is generally used for introducing middleware.
-app.use() can handle all type of HTTP requests.
-app.get() is only for handling GET HTTP requests.


app.use() vs app.all()
======================
app.use() will only see whether url starts with specified path.
app.all() will match the complete path.

app.use( "/book" , middleware);
// will match /book
// will match /book/author
// will match /book/subject

app.all( "/book" , handler);
// will match /book
// won't match /book/author   
// won't match /book/subject    

app.all( "/book/*" , handler);
// won't match /book        
// will match /book/author
// will match /book/subject
