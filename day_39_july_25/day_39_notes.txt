db.employees.find({"name":/san/i})   // (Like in SQL)
 
Projection : which fields to include in the results
             use 1 to include a field and 0 to exclude a field.

 db.employees.find( {} , {sal:0} ) // all columns except sal
 db.employees.find( {} , {sal:1,name:1} ) // name,sal column in result
 

 db.employees.find().sort({sal:1})   //asc
 db.employees.find().sort({sal:-1}) //desc
 db.employees.find().count()
 db.employees.countDocuments({salary:13001});
 db.employees.find().limit(2)
 db.employees.find().sort({sal:-1}).skip(2).limit(1)
 db.employees.distinct('eid');
 
-To Update the existing Data
 db.employees.updateOne( { id: 101 }, { $set: { sal: 2000 } } ) 
 db.employees.updatemany( { sal:6000 }, { $set: { sal: 6500 } } )
 db.employees.updateOne({id: 101},{$set:{eid:1,name:'sanjay',sal:5000}},{ upsert: true })
 // Update the document, but if not found insert it
-To Delete 
 db.employees.deleteOne({ sal:6000 })
 db.employees.deleteMany({ name: "sanjay" })
 db.employees.remove({ id:101 }) 	// Deprecated
 db.users.deleteMany({})   // Remove All Documents(equivalent of SQL's truncate)
 
 db.employees.drop()  // Drop The Collection
 db.dropDatabase()    // Drop Database


 
Q. find() vs findOne()
======================
findOne() - if query matches, first document is returned, otherwise null.
find() - no matter the number of documents matched, a cursor is returned, never null.

-cursor is a pointer that references the documents of the collection returned.
-cursor will find 20 documents at once.
-db.employees.find({sal:8000}).forEach(ele=>print(ele.name))

cursor Methods: count() , forEach(print,printjson), hasNext(), isClosed(), close(), explain(), limit(),map(),max(),min(),pretty(), size(), skip(), sort(), toArray()